import org.gradle.api.artifacts.*

group 'at.alladin.rmbt'
version '1.0-SNAPSHOT'
apply plugin: 'base' // To add "clean" task to the root project.

subprojects {
    apply from: rootProject.file('common.gradle')
}

buildscript {
    repositories {
        //jcenter()
        mavenCentral()
        //https://developer.android.com/studio/preview/features/new-android-plugin-migration.html
        maven {
            url 'https://maven.google.com'
        }
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.0'
    }
}

def getVersionNameFromGit() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--always'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getBranchFromGit() {
    def stdoutBranch = new ByteArrayOutputStream()

    exec {
        commandLine 'git', 'symbolic-ref', '--short', 'HEAD'
        standardOutput = stdoutBranch
        // git symbolic-ref fails if HEAD is detached
        ignoreExitValue true

    }
    return stdoutBranch.toString().trim()
}

def getHashFromGit() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine "git", "log", "--pretty=format:'%h'", "-n 1"
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getVersionCodeFromGit() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-list', 'HEAD', '--count'
        standardOutput = stdout
    }
    return stdout.toString().trim().toInteger()
}

def getDirtyFromGit() {
    def stdout = new ByteArrayOutputStream()
    exec {
        // git list all "dirty" (untracked, modified) files
        commandLine 'git', 'status', '--porcelain'
        standardOutput = stdout
    }
    //if there are any files, git is "dirty"
    if (stdout.toString().length()>0)
        return "true";
    else
        return "false";
}