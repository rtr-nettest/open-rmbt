buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "com.github.johnrengelman:shadow:8.1.1"
  }
}


plugins {
    id "java"
    id "com.github.johnrengelman.shadow" version "8.1.1"
}


apply plugin: "com.github.johnrengelman.shadow"

java {
    sourceCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.5'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2'
    implementation group: 'org.json', name: 'json', version: '20220320'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    implementation group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '5.0.4'
    implementation group: 'dnsjava', name: 'dnsjava', version: '2.1.8'
    implementation project(':RMBTSharedCode')
    implementation project(':RMBTUtil')

    testImplementation group: 'org.jmockit', name: 'jmockit', version: '1.45'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

sourceSets {
    main {
        resources { srcDir 'src' }
    }
}

subprojects{
    evaluationDependsOn(':RMBTSharedCode')
    evaluationDependsOn(':RMBTUtil')
}

jar {
    manifest {
        attributes 'Main-Class': 'at.rtr.rmbt.client.RMBTClientRunner'
        attributes 'Permissions': 'all-permissions'
        attributes 'Codebase': '*.qmon.eu *.akostest.net'
        attributes 'Application-Library-Allowable-Codebase': '*'
    }
}

shadowJar {
    archiveBaseName = 'RMBTClient'
}

def revisionPropertiesFile = file("${buildDir}/resources/main/revision.properties")
processResources {
    doLast {
        String revisionProperties = "git.describe=" + getVersionNameFromGit() + "\n"
        revisionProperties = revisionProperties + "git.branch=" + getBranchFromGit() + "\n"
        revisionProperties = revisionProperties + "git.dirty=" + getDirtyFromGit() + "\n"
        revisionProperties = revisionProperties + "git.id=" + getHashFromGit() + "\n"
        revisionProperties = revisionProperties + "git.revision=" + getVersionCodeFromGit() + "\n"
        revisionPropertiesFile.write(revisionProperties, 'UTF-8')
    }
}

test {
    jvmArgs "-javaagent:${classpath.find { it.name.contains("jmockit") }.absolutePath}"
}
